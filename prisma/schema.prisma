generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roleId        String?
  accounts      Account[]
  news          News[]
  sessions      Session[]
  farmers       Farmer[]
  role          Role?     @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model News {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  image       String?
  categoryId  String?
  authorId    String
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])

  @@index([authorId], map: "news_authorId_fkey")
  @@index([categoryId], map: "news_categoryId_fkey")
  @@map("news")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  news        News[]

  @@map("categories")
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String
  altText      String?
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("media")
}

model Slider {
  id         String   @id @default(cuid())
  title      String
  subtitle   String?
  image      String
  link       String?
  order      Int      @default(0)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buttonText String?  @default("Pelajari Lebih Lanjut")

  @@map("sliders")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    String
  date        DateTime @default(now())
  type        String   @default("image")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery")
}

model WaterLevelData {
  id         String   @id @default(cuid())
  location   String
  value      Float
  unit       String   @default("cm")
  measuredAt DateTime
  recordedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("water_level_data")
}

model RainfallData {
  id         String   @id @default(cuid())
  location   String
  value      Float
  unit       String   @default("mm")
  measuredAt DateTime
  recordedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("rainfall_data")
}

model CropData {
  id         String   @id @default(cuid())
  crop       String
  area       Float
  production Float
  season     String
  location   String?
  recordedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("crop_data")
}

model FarmerData {
  id           String   @id @default(cuid())
  district     String
  farmers      Int
  area         Float
  averageYield Float
  recordedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("farmer_data")
}

model Farmer {
  id        String   @id @default(cuid())
  name      String
  group     String
  chairman  String
  members   Json     // Store as JSON array for flexibility
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "farmers_userId_fkey")
  @@map("farmers")
}

model Permission {
  id          String           @id @default(cuid())
  name        String
  description String?
  category    String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isDefault   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       User[]

  @@map("roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("unread") // unread, read, replied, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}
